/*ॐ भूर्भुवः स्व तत्सवितुर्वरेण्यं
भर्गो देवस्य धीमहि
 धियो यो नः प्रचोदयात॥*/

#include <iostream>
#include <bits/stdc++.h>
using namespace std;
#define ll long long
#define mod 1000000007

/*@ashish thakur */

/*******************************SEGMENT TREE*****************************************/

class SegmentTree {
private:
    vector<int> arr;
    vector<int> tree;

    void build(int node, int start, int end) {
        if (start == end) {
            tree[node] = arr[start];
        } else {
            int mid = (start + end) / 2;
            build(2 * node + 1, start, mid);
            build(2 * node + 2, mid + 1, end);
            tree[node] = tree[2 * node + 1] + tree[2 * node + 2];
        }
    }

    void update(int index, int value, int node, int start, int end) {
        if (start == end) {
            arr[index] = value;
            tree[node] = value;
        } else {
            int mid = (start + end) / 2;
            if (start <= index && index <= mid) {
                update(index, value, 2 * node + 1, start, mid);
            } else {
                update(index, value, 2 * node + 2, mid + 1, end);
            }
            tree[node] = tree[2 * node + 1] + tree[2 * node + 2];
        }
    }

    int query(int left, int right, int node, int start, int end) {
        if (right < start || left > end) {
            return 0;
        } else if (left <= start && right >= end) {
            return tree[node];
        } else {
            int mid = (start + end) / 2;
            return query(left, right, 2 * node + 1, start, mid) +
                   query(left, right, 2 * node + 2, mid + 1, end);
        }
    }

public:
    SegmentTree(vector<int>& input) {
        arr = input;
        tree.resize(4 * input.size());
        build(0, 0, input.size() - 1);
    }

    void update(int index, int value) {
        update(index, value, 0, 0, arr.size() - 1);
    }

    int query(int left, int right) {
        return query(left, right, 0, 0, arr.size() - 1);
    }
};

int main() {
    vector<int> arr = {1, 3, 5, 7, 9, 11};
    SegmentTree segmentTree(arr);
    cout << segmentTree.query(0, 3) << endl;  // Output: 16 (sum of elements from index 0 to 3)
    segmentTree.update(2, 10);  // Update element at index 2 to 10
    cout << segmentTree.query(0, 3) << endl;  // Output: 21 (sum of updated elements from index 0 to 3)
    return 0;
}
