/*ॐ भूर्भुवः स्व तत्सवितुर्वरेण्यं
भर्गो देवस्य धीमहि
 धियो यो नः प्रचोदयात॥*/

#include <iostream>
#include <bits/stdc++.h>
using namespace std;
#define ll long long
#define mod 1000000007

/*@ashish thakur */

/*
Motive: To find the minimum distance from source to all other vertices

1-Set dist=0 and all other distances as infinity.
2-Push the source node into the min heap as a pair <distance, node> → i.e., <0, source>.
3-Pop the top element (node with the smallest distance).
For each adjacent neighbor of the current node:
    a-Calculate the distance using the formula:
    b-dist[v] = dist[u] + weight[u][v]
    c-If this new distance is shorter than the current dist[v], update it.
    d-Push the updated pair <dist[v], v> into the min heap
4-Repeat step 3 until the min heap is empty.
5-Return the distance array, which holds the shortest distance from the source to all nodes.

*/
vector<int> dijkstra(int V, vector<vector<int>> &edges, int src)
{
    vector<pair<int, int>> adj[V];

    // Build undirected graph adjacency list
    for (auto &edge : edges)
    {
        int u = edge[0];
        int v = edge[1];
        int wt = edge[2];
        adj[u].push_back({v, wt});
        adj[v].push_back({u, wt});
    }

    vector<int> dist(V, 1e8);
    dist[src] = 0;

    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
    pq.push({0, src});

    while (!pq.empty())
    {
        int d = pq.top().first;
        int u = pq.top().second;
        pq.pop();

        for (auto &it : adj[u])
        {
            int v = it.first;
            int wt = it.second;
            if (dist[v] > d + wt)
            {
                dist[v] = d + wt;
                pq.push({dist[v], v});
            }
        }
    }

    return dist;
}

int main()
{
    int V = 5;
    vector<vector<int>> edges = {
        {0, 1, 2},
        {0, 2, 4},
        {1, 2, 1},
        {1, 3, 7},
        {2, 4, 3},
        {3, 4, 1}};

    int src = 0;
    vector<int> result = dijkstra(V, edges, src);

    cout << "Shortest distances from node " << src << ":\n";
    for (int i = 0; i < V; ++i)
    {
        cout << "To node " << i << " = " << result[i] << "\n";
    }

    return 0;
}
